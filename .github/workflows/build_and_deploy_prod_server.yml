name: Build

on:
  push:
    branches: [ fix_deploy ]
  pull_request:
    branches: [ fix_deploy ]

jobs:
  build_backend:
    name: Build gateway jar & create image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: deploy
          submodules: recursive
      - name: Clone last version of fronend
        run: cd frontend && git checkout Develop
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}
          password: ${{ secrets.DOCKER_PASSWORD_TEST_SERVER }}
      - name: Push to dockerhub gateway service
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: infra/Dockerfile_backend_gateway
          push: true
          tags: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}/monitoring_gateway:latest
      - name: Push to dockerhub report service
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: infra/Dockerfile_backend_report
          push: true
          tags: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}/monitoring_report:latest

  # build_frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo with submodules
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}
  #         password: ${{ secrets.DOCKER_PASSWORD_TEST_SERVER }}
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./
  #         file: infra/Dockerfile_frontend
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}/monitoring_frontend:latest
  
  build_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'frontend'
    steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Update submodules
        run: git submodule update --remote
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install
      - run: npm run build || true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}
          password: ${{ secrets.DOCKER_PASSWORD_TEST_SERVER }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: infra/Dockerfile_frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}/monitoring_frontend:latest

  deploy_backend:
    name: Deploy to prod server
    runs-on: ubuntu-latest
    needs: 
      - build_backend
      - build_frontend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref:
            deploy
      - name: Copying infra files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY_PROD_SERVER }}
          source: "infra/docker-compose-prod-server.yml, infra/nginx_prod.conf"
          target: /home/code/

      - name: Create .env & launch docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY_PROD_SERVER }}
          script: |
            cd /home/code/infra/
            docker compose -f docker-compose-prod-server.yml down
            docker image rm ${{ secrets.DOCKER_USERNAME_TEST_SERVER }}/monitoring_backend:latest
            docker image rm redis:alpine
            docker image rm postgres:13.3-alpine
            docker image prune
            docker volume prune
            rm .env
            cat > .env << EOT
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_SERVER_PORT=${{ secrets.MAIL_SERVER_PORT }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            SECURITY_KEY=${{ secrets.SECURITY_KEY }}
            SMTP_SERVER=${{ secrets.SMTP_SERVER }}
            REPORT_SERVICE_URL=${{ secrets.REPORT_SERVICE_URL }}
            EOT
            docker compose -f docker-compose-prod-server.yml up -d